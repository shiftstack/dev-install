---
- hosts: standalone
  become: true
  become_user: stack
  gather_facts: false
  vars_files: vars/defaults.yaml
  roles:
  - network_info

  tasks:

  - name: Gather host environment variables
    setup:
      filter: ansible_env

  - name: Create openshift user without any admin privileges # noqa 301
    shell: |
      if ! openstack project show openshift; then
          openstack project create openshift
      fi
      if ! openstack user show openshift; then
          openstack user create --password '{{ openshift_password }}' openshift
      fi
      for r in _member_ member; do
          if openstack role show $r; then
              openstack role add --user openshift --project openshift $r
          fi
      done

      # Unlimited quota
      openstack quota set \
          --cores -1 \
          --fixed-ips -1 \
          --injected-file-size -1 \
          --injected-files -1 \
          --instances -1 \
          --key-pairs -1 \
          --properties -1 \
          --ram -1 \
          --server-groups -1 \
          --server-group-members -1 \
          --backups -1 \
          --backup-gigabytes -1 \
          --per-volume-gigabytes -1 \
          --snapshots -1 \
          --volumes -1 \
          --floating-ips -1 \
          --secgroup-rules -1 \
          --secgroups -1 \
          --networks -1 \
          --subnets -1 \
          --ports -1 \
          --routers -1 \
          --rbac-policies -1 \
          --subnetpools -1 \
          openshift

    environment:
      OS_CLOUD: standalone

  - name: Add swiftoperator role for openshift user
    command: openstack role add --user openshift --project openshift swiftoperator
    environment:
      OS_CLOUD: standalone
    when: swiftoperator_enabled

  - name: Create flavors # noqa 301
    shell: |
      if ! openstack flavor show m1.tiny; then
          openstack flavor create --ram 1024 --disk 10 --vcpu 2 --public m1.tiny
      fi
      if ! openstack flavor show m1.small; then
          openstack flavor create --ram 2048 --disk 15 --vcpu 2 --public m1.small
      fi
      if ! openstack flavor show m1.medium; then
          openstack flavor create --ram 4096 --disk 20 --vcpu 2 --public m1.medium
      fi
      if ! openstack flavor show m1.large; then
          openstack flavor create --ram 8192 --disk 25 --vcpu 4 --public m1.large
      fi
      if ! openstack flavor show m1.large.nodisk; then
          openstack flavor create --ram 8192 --disk 0 --vcpu 4 --public m1.large.nodisk
      fi
      if ! openstack flavor show m1.xlarge; then
          openstack flavor create --ram 16384 --disk 40 --vcpu 4 --public m1.xlarge
      fi
      if ! openstack flavor show m1.xlarge.nodisk; then
          openstack flavor create --ram 16384 --disk 0 --vcpu 4 --public m1.xlarge.nodisk
      fi
    environment:
      OS_CLOUD: standalone

  - name: Create external network
    shell: |
      if ! openstack network show external; then
          openstack network create --external --provider-physical-network external --provider-network-type flat external
      fi
      if ! openstack subnet show external-subnet; then
          openstack subnet create external-subnet --subnet-range "{{ external_cidr }}" \
              --no-dhcp --gateway "{{ external_gateway }}" \
              --allocation-pool "start={{ external_fip_pool_start }},end={{ external_fip_pool_end }}" \
              --network external
      fi
    environment:
      OS_CLOUD: standalone
    when: external_fip_pool_start is defined and external_fip_pool_end is defined

  - name: Create hostonly network # noqa 301
    shell: |
      if ! openstack network show hostonly; then
          openstack network create --project openshift --share --external --provider-physical-network hostonly --provider-network-type flat hostonly
      fi
      if ! openstack subnet show hostonly-subnet; then
          openstack subnet create --project openshift hostonly-subnet --subnet-range "{{ hostonly_cidr }}" \
              --dhcp --gateway "{{ hostonly_gateway }}" \
              --dns-nameserver "{{ network_info.dns | first }}" \
              --allocation-pool "start={{ hostonly_fip_pool_start }},end={{ hostonly_fip_pool_end }}" \
              --network hostonly
      fi
    environment:
      OS_CLOUD: standalone

  - name: Create basic security group which allow SSH # noqa 301
    shell: |
      if ! openstack security group show allow_ssh; then
          openstack security group create allow_ssh --project openshift
          openstack security group rule create --protocol tcp --dst-port 22 --project openshift allow_ssh
      fi
    environment:
      OS_CLOUD: standalone

  # openstack cli doesn't have manila support (no openstack share type ...)in RHEL/OSP
  - name: Create Manila default share type # noqa 301
    when: manila_enabled
    block:

    - name: Convert clouds.yaml to legacy environment variables
      script: files/cloud-to-env.py
      register: os_env_vars
      environment:
        OS_CLOUD: standalone

    # type-show MUST NOT have OS_SHARE_API_VERSION set
    # type-create MUST have OS_SHARE_API_VERSION set
    - name: Create Manila default share type
      shell: |
        if ! OS_SHARE_API_VERSION= manila type-show default; then
            manila type-create default false
        fi
      environment: "{{ legacy_vars | combine(extra_vars) }}"
      vars:
        legacy_vars: "{{ os_env_vars.stdout | from_json }}"
        extra_vars:
          # https://bugzilla.redhat.com/show_bug.cgi?id=1960710
          OS_SHARE_API_VERSION: 2.60

    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Disable snapshot support on pre-Wallaby Manila
      when: ansible_facts.packages['python3-manilaclient'][0].version is version('2.6.0', '<')
      shell: |
        manila type-key default set snapshot_support=False
      environment: "{{ legacy_vars | combine(extra_vars) }}"
      vars:
        legacy_vars: "{{ os_env_vars.stdout | from_json }}"
        extra_vars:
          # https://bugzilla.redhat.com/show_bug.cgi?id=1960710
          OS_SHARE_API_VERSION: 2.60

  - name: Read clouds.yaml
    slurp:
      src: &cloudsyamlpath /home/stack/.config/openstack/clouds.yaml
    register: cloudsyaml

  - name: Parse cloud.yaml
    set_fact:
      cloudsyaml: "{{ cloudsyaml['content'] | b64decode | from_yaml }}"

  - name: Extract standalone cloud config
    set_fact:
      standalone: "{{ cloudsyaml['clouds']['standalone'] }}"

  - name: Add shiftstack entry to clouds.yaml
    set_fact:
      cloudsyaml: "{{ cloudsyaml | combine({'clouds': {'openshift': openshift}}, recursive=true) }}"
    vars:
      openshift:
        auth:
          auth_url: "{{ standalone['auth']['auth_url'] }}"
          password: "{{ openshift_password }}"
          project_domain_name: Default
          project_name: openshift
          user_domain_name: Default
          username: openshift
        cacert: "{{ standalone['cacert'] }}"
        identity_api_version: "{{ standalone['identity_api_version'] }}"
        volume_api_version: "{{ standalone['volume_api_version'] | default('3') }}"
        region_name: "{{ standalone['region_name'] }}"

  - name: Write updated clouds.yaml
    copy:
      dest: *cloudsyamlpath
      content: "{{ cloudsyaml | to_nice_yaml }}"
      mode: 0755

  - name: Manage RHCOS image
    when:
      - create_rhcos_image
    block:
    - name: Set images directory
      set_fact:
        images_dir: "{{ ansible_env.HOME }}/images"

    - name: Create images directory
      file:
        path: "{{ images_dir }}"
        state: directory
        mode: 0755

    - name: Get URL of latest RHCOS image
      block:
      # NOTE(mdbooth): My first attempt to do this involved something like
      #  set_fact:
      #    rhcos_meta: "{{ lookup('url', rhcos_meta_url) | from_json }}"
      #
      # which would have been much nicer, but this gave an unfathomable ansible
      # error and I eventually gave up and did this instead.

      - name: Fetch rhcos release info
        get_url:
          url: "{{ rhcos_meta_url }}"
          dest: "{{ images_dir }}"
          force: true
        register: rhcos_meta

      - name: Read rhcos release info
        slurp:
          src: "{{ rhcos_meta.dest }}"
        register: rhcos_meta

      - set_fact:
          rhcos_url: "{{ dict['baseURI'] }}{{ dict['images']['openstack']['path'] }}"
        vars:
          dict: "{{ rhcos_meta.content | b64decode | from_json }}"
      when: rhcos_url is undefined

    - name: Extract RHCOS compressed filename
      set_fact:
        rhcos_compressed_filename: "{{ rhcos_url | urlsplit('path') | basename }}"

    - name: Download compressed RHCOS image
      get_url:
        url: "{{ rhcos_url }}"
        dest: "{{ images_dir }}/{{ rhcos_compressed_filename }}"
      register: rhcos

    # NOTE(mdbooth): Bizarrely, unarchive can't do this
    - name: Uncompress RHCOS image
      shell: |
        set -ex -o pipefail

        uncompressed=${rhcos_compressed_path%%.gz}
        if [ ! -f "${uncompressed}" ]; then
          gzip -dfc "${rhcos_compressed_path}" > "${uncompressed}"
        fi
        echo ${uncompressed}
      environment:
        rhcos_compressed_path: "{{ images_dir }}/{{ rhcos_compressed_filename }}"
      register: uncompress

    - name: Extract uncompressed RHCOS filename
      set_fact:
        rhcos_uncompressed_path: "{{ uncompress.stdout }}"

    - name: Import RHCOS image
      shell: |
        set -ex -o pipefail

        # Get hash of existing rhcos image if we have one. Be careful not to fail
        # if it doesn't exist, just set an empty variable.
        os_hash_value=$(openstack image show rhcos -c properties -f json | jq -re '.properties.os_hash_value' || echo)

        # Delete the rhcos image if its checksum doesn't match what we downloaded
        if [ ! -z "${os_hash_value}" ] && \
           ! echo "${os_hash_value} {{ rhcos_uncompressed_path }}" | sha512sum -c; then
          openstack image delete rhcos
        fi

        if ! openstack image show rhcos >/dev/null; then
          openstack image create rhcos --container-format bare --disk-format qcow2 --public --file "{{ rhcos_uncompressed_path }}"
        fi
      environment:
        OS_CLOUD: standalone
