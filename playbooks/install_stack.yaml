---
- hosts: standalone
  become: true
  become_user: stack
  gather_facts: false
  vars_files: vars/defaults.yaml
  roles:
  - network_info

  tasks:

  - name: Get minimum ansible facts
    setup:
      gather_subset: min

  - name: Initialise service environment list from user provided services
    set_fact:
      service_envs: "{{ enabled_services }}"

  # OSP16 doesn't have HA enabled by default for all service (HAproxy).
  # While this is being fixed, we'll force it here.
  - name: Enable HA by default
    block:
    - name: Add HA services
      set_fact:
        service_envs: "{{ service_envs | union(ha_env) }}"
      vars:
        ha_env:
        - /usr/share/openstack-tripleo-heat-templates/environments/docker-ha.yaml

  - name: Enable SSL
    when: ssl_enabled
    block:
    - name: Add SSL service
      set_fact:
        service_envs: "{{ service_envs | union(ssl_env) }}"
      vars:
        ssl_env:
        - /usr/share/openstack-tripleo-heat-templates/environments/ssl/tls-endpoints-public-ip.yaml
        - /usr/share/openstack-tripleo-heat-templates/environments/ssl/enable-tls.yaml
        - /usr/share/openstack-tripleo-heat-templates/environments/ssl/inject-trust-anchor.yaml

  - name: Generate SSL self-signed certificate
    when: ssl_enabled
    include_role:
      name: simpleca
    vars:
      cert_user: standalone
      ca_dir: "{{ ansible_env.HOME }}/ssl/ca"
      cert_dir: "{{ ansible_env.HOME }}/ssl"
      cert_name: standalone

  - name: Prepare the host for SSL
    when: ssl_enabled
    block:
      - name: Read SSL certificate
        slurp:
          src: "{{ ansible_env.HOME }}/ssl/standalone.crt"
        register: ssl_cert_output
        when: ssl_cert is not defined
      - name: Read SSL key
        slurp:
          src: "{{ ansible_env.HOME }}/ssl/standalone.key"
        register: ssl_key_output
        when: ssl_ssl_key is not defined
      - name: Read CA certificate
        slurp:
          src: "{{ ansible_env.HOME }}/ssl/ca/simpleca.crt"
        register: ssl_ca_cert_output
        when: ssl_ca_cert is not defined
      - name: Set fact for SSL cert
        when: ssl_cert is not defined
        set_fact:
          ssl_cert: "{{ ssl_cert_output['content'] | b64decode }}"
      - name: Set fact for SSL key
        when: ssl_key is not defined
        set_fact:
          ssl_key: "{{ ssl_key_output['content'] | b64decode }}"
      - name: Set fact for CA cert
        when: ssl_ca_cert is not defined
        set_fact:
          ssl_ca_cert: "{{ ssl_ca_cert_output['content'] | b64decode }}"
      - name: Copy CA cert into PKI
        become: true
        become_user: root
        copy:
          dest: "{{ ssl_ca_cert_path }}"
          content: "{{ ssl_ca_cert }}"
          mode: '0444'
          owner: root
          group: root
      - name: Update CA trust
        become: true
        become_user: root
        command: update-ca-trust extract

  - name: Install the tripleo client
    yum:
      name:
      - ceph-ansible
      - python3-tripleoclient
    become: true
    become_user: root

  - name: Create dev-install_net_config.yaml
    template:
      mode: 0644
      src: dev-install_net_config.yaml.j2
      dest: "{{ ansible_env.HOME }}/dev-install_net_config.yaml"

  - name: Read dev-install_net_config.yaml
    slurp:
      src: "{{ ansible_env.HOME }}/dev-install_net_config.yaml"
    register: net_config

  - name: Create net_config_json fact
    set_fact:
      net_config_json: "{{ net_config['content'] | b64decode | from_yaml }}"

  - name: Set fact for SR-IOV services overrides
    set_fact:
      sriov_services_fact: "{{ sriov_interface|default(None)| ternary(sriov_services, []) }}"

  - name: Read the TripleO role
    slurp:
      src: "{{ standalone_role }}"
    register: role_yaml

  - name: Parse the role data
    set_fact:
      role_data: "{{ role_yaml['content'] | b64decode | from_yaml }}"

  - name: Set fact for the new role data
    set_fact:
      new_role_data: "{{ role_data }}"

  - name: Set the fact for overrides services
    set_fact:
      role_data: >
        {% set _ = new_role_data.0.__setitem__('ServicesDefault', new_role_data.0.ServicesDefault |
        union(sriov_services_fact) | union(standalone_role_overrides)) %}
        {{ new_role_data }}

  - name: Create the new role file
    copy:
      dest: "{{ ansible_env.HOME }}/tripleo_standalone_role.yaml"
      content: "{{ role_data }}"
      mode: 0644

  - name: Configure manila
    when: manila_enabled
    block:
    - name: Add manila services
      set_fact:
        service_envs: "{{ service_envs | union(manila_env) }}"
      vars:
        manila_env:
        - /usr/share/openstack-tripleo-heat-templates/environments/ceph-ansible/ceph-mds.yaml
        - /usr/share/openstack-tripleo-heat-templates/environments/manila-cephfsganesha-config.yaml

    # This works round https://bugs.launchpad.net/tripleo/+bug/1911022
    - name: Add manila extraconfig
      set_fact:
        standalone_extra_config: "{{ standalone_extra_config | combine(manila_extra_config) }}"
      vars:
        manila_extra_config:
          ganesha_vip: "{{ control_plane_ip }}"

    - name: Ensure ceph is enabled
      set_fact:
        ceph_enabled: true

  - name: Create standalone_parameters.yaml
    template:
      mode: 0644
      src: standalone_parameters.yaml.j2
      dest: "{{ ansible_env.HOME }}/standalone_parameters.yaml"

  - name: Enable Octavia
    when: octavia_enabled
    block:
      # The Amphora image is broken for OSP17, see:
      # https://review.rdoproject.org/r/32023
      # Until then this is fine (tested) to use the latest
      # image from RDO:
      - name: Download the latest Amphora image for Octavia
        get_url:
          url: https://images.rdoproject.org/octavia/master/amphora-x64-haproxy-centos.qcow2
          dest: "{{ ansible_env.HOME }}/amphora.qcow2"

      - name: Generate a keypair for Octavia Amphora (needed by TripleO)
        shell: |
          if [ ! -f "{{ ansible_env.HOME }}/octavia" ]; then
              ssh-keygen -b 2048 -t rsa -f "{{ ansible_env.HOME }}/octavia" -q -N ""
          fi
        args:
          creates: "{{ ansible_env.HOME }}/octavia"

      - name: Add octavia to enabled services
        set_fact:
          service_envs: "{{ service_envs | union(octavia_env) }}"
        vars:
          octavia_env:
            - /usr/share/openstack-tripleo-heat-templates/environments/services/octavia.yaml

  # On RHEL/OSP if cip_config is not provided, we download it from latest puddle
  - name: Set cip_config from downloaded container_image_prepare.yaml
    when:
      - cip_config is not defined
      - ansible_facts.distribution == 'RedHat'
    block:
    - name: Read container_image_prepare.yaml
      slurp:
        src: /home/stack/container_image_prepare.yaml
      register: cip_yaml
    - name: Extract container image parameters from downloaded container_image_prepare.yaml
      set_fact:
        cip_raw: "{{ (cip_yaml.content | b64decode | from_yaml)['container-image-prepare'] | dict2items }}"
    - name: Set cip_config from downloaded container_image_prepare.yaml
      set_fact:
        cip_config: "{{ [{ 'set': dict(keys | zip(values)) }] }}"
      vars:
        # container_image_prepare.yaml downloaded from the puddle contains some
        # keys with invalid names, e.g. 'ceph-namespace' instead of
        # 'ceph_namespace'. We rewrite them.
        keys: "{{ cip_raw | map(attribute='key') | map('regex_replace', '-', '_') | list }}"
        values: "{{ cip_raw | map(attribute='value') | list }}"

  - name: Create containers-prepare-parameters.yaml if cip_config is defined
    when: cip_config is defined
    copy:
      dest: "{{ ansible_env.HOME }}/containers-prepare-parameters.yaml"
      content: "{{ cip_content | to_nice_yaml }}"
      owner: stack
      mode: 0644
    vars:
      cip_content:
        parameter_defaults:
          ContainerImagePrepare: "{{ cip_config }}"

  - name: Download containers-prepare-parameters.yaml from upstream master if cip_config is not defined on CentOS
    when:
      - cip_config is not defined
      - ansible_facts.distribution == 'CentOS'
    get_url:
      dest: "{{ ansible_env.HOME }}/containers-prepare-parameters.yaml"
      url: "https://opendev.org/openstack/tripleo-common/raw/branch/master/container-images/container_image_prepare_defaults.yaml"
      owner: stack
      mode: 0644

  - name: Add ceph to enabled services
    set_fact:
      service_envs: "{{ service_envs | union(ceph_env) }}"
    vars:
      ceph_env:
        - /usr/share/openstack-tripleo-heat-templates/environments/ceph-ansible/ceph-ansible.yaml
    when: ceph_enabled

  - name: Install all tuned profiles if SR-IOV is enabled
    yum:
      name:
      - tuned-profiles-*
    become: true
    become_user: root
    when: dpdk_kernel_args is defined

  - name: Add sriov to enabled services
    set_fact:
      service_envs: "{{ service_envs | union(sriov_env) }}"
    vars:
      sriov_env:
        - /usr/share/openstack-tripleo-heat-templates/environments/services/neutron-ovn-sriov.yaml
    when: sriov_interface is defined

  - name: Create default_tripleo_envs fact
    set_fact:
      default_tripleo_envs:
        - /usr/share/openstack-tripleo-heat-templates/environments/standalone/standalone-tripleo.yaml
        - "{{ ansible_env.HOME }}/containers-prepare-parameters.yaml"

  - name: Create tripleo_override_envs fact
    set_fact:
      tripleo_override_envs:
        - "{{ ansible_env.HOME }}/standalone_parameters.yaml"

  - name: Run TripleO deploy
    import_role:
      name: tripleo.operator.tripleo_deploy
    vars:
      openstack_bin: sudo openstack
      tripleo_deploy_deployment_user: stack
      tripleo_deploy_standalone: true
      tripleo_deploy_output_dir: "{{ ansible_env.HOME }}"
      tripleo_deploy_local_ip: "{{ public_api }}"
      tripleo_deploy_control_virtual_ip: "{{ control_plane_ip }}"
      #TODO(emilien) figure out if we need this:
      #tripleo_deploy_public_virtual_ip: "{{ ssl_enabled | ternary(public_api, omit) }}"
      tripleo_deploy_environment_files: "{{ default_tripleo_envs + service_envs + tripleo_override_envs }}"
      tripleo_deploy_generate_scripts: true
      tripleo_deploy_keep_running: true
      tripleo_deploy_home_dir: "{{ ansible_env.HOME }}"
      tripleo_deploy_roles_file: "{{ ansible_env.HOME }}/tripleo_standalone_role.yaml"

  - name: Reboot if SR-IOV is enabled (to apply kernel changes)
    when:
      - sriov_interface is defined
    block:
      - name: Reboot the node
        become_user: root
        reboot:
      - name: Pause for 2 minutes to let all containers to start and OpenStack to be ready
        pause:
          minutes: 2
