---
- hosts: standalone
  become: true
  become_user: root
  gather_facts: false
  vars_files: vars/defaults.yaml
  roles:
  - network_info

  tasks:

  - name: Install ovs tools
    yum:
      state: installed
      name:
      - rhosp-openvswitch
      - NetworkManager-ovs
      - nmstate
      - iptables
    register: installovs

  - name: Restart NetworkManager to load ovs plugin # noqa 503
    systemd:
      name: "NetworkManager.service"
      enabled: true
      state: restarted
    when: installovs.changed

  - name: Start openvswitch
    systemd:
      name: openvswitch.service
      enabled: true
      state: started

  - name: Get list of network interfaces
    command: nmstatectl show --json
    register: nmstatectl

  # Add the dummy1 interface
  - set_fact:
      configure_interfaces:
      - name: dummy1
        type: dummy
        state: up
        ipv4:
          enabled: false
        ipv6:
          enabled: false

  # Disable all interfaces which we are not using.
  # This prevents a later failure in the network systemd unit
  - set_fact:
      configure_interfaces: "{{ configure_interfaces + [ { 'name': item } | combine(disabled) ] }}"
    loop: "{{ all_interfaces | difference(used_interfaces) }}"
    vars:
      all_interfaces: "{{ (nmstatectl.stdout | from_json)['interfaces'] | map(attribute='name') | list }}"
      used_interfaces: "{{ [ 'lo', network_info.public_ipv4.interface ] + (sriov_interface is defined | ternary([sriov_interface], [])) }}"
      disabled:
        state: down
        ipv4:
          enabled: false
        ipv6:
          enabled: false

  - name: Set nmstate # noqa 301
    command: nmstatectl set --no-commit --timeout 60
    args:
      stdin: "{{ network_state | to_nice_json }}"
    vars:
      network_state:
        interfaces: "{{ configure_interfaces }}"
    register: nmstateset

  # Doing this in 2 steps means that we'll automatically rollback if we break
  # networking such that ansible can no longer connect
  - name: Commit the new network state # noqa 301
    command: nmstatectl commit "{{ checkpoint }}"
    vars:
      checkpoint: "{{ (nmstateset.stdout_lines|last).split()[1] }}"

  - name: Create systemd unit to add SNAT rule for hostonly network
    template:
      src: "standalone_snat.service.j2"
      dest: "/etc/systemd/system/standalone_hostonly_snat.service"
      owner: root
      group: root
      mode: '0644'
    vars:
      cidr: "{{ hostonly_cidr }}"
      exit_ip: "{{ network_info.public_ipv4.address }}"

  - name: Activate systemd units
    systemd:
      name: "{{ item }}.service"
      enabled: true
      state: started
      daemon_reload: true
    loop:
    - standalone_hostonly_snat
