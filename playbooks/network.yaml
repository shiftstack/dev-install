---
- hosts: standalone
  become: true
  become_user: root
  gather_facts: false
  vars_files: vars/defaults.yaml
  roles:
  - network_info

  tasks:

  - name: Install ovs tools
    yum:
      state: installed
      name:
      - rhosp-openvswitch
      - NetworkManager-ovs
      - nmstate
      - iptables
    register: installovs

  - name: Restart NetworkManager to load ovs plugin # noqa 503
    systemd:
      name: "NetworkManager.service"
      enabled: true
      state: restarted
    when: installovs.changed

  - name: Start openvswitch
    systemd:
      name: openvswitch.service
      enabled: true
      state: started

  - name: Define dummy interfaces to be created
    set_fact:
      nmstate_ifs:
      - name: dummy0
        type: dummy
        state: up
        ipv4:
          enabled: false
        ipv6:
          enabled: false
      - name: dummy1
        type: dummy
        state: up
        ipv4:
          enabled: false
        ipv6:
          enabled: false

  # This works round a TripleO installation failure caused by NM-managed
  # interfaces 'failing' because:
  # * The default NM configuration specifies DHCP
  # * They have an active link, but
  # * The network they are plugged into doesn't have DHCP
  #
  # To work round this we remove all interfaces from NM control except the
  # public interface.
  #
  # The public interface will also be remove from NM control later by TripleO,
  # but we don't touch it here because:
  # * We are confident that it is correctly configured in NM because we're
  #   connected over it
  # * We need it for installation
  - name: Remove all physical nics from NM control except the public interface
    set_fact:
      nmstate_ifs: "{{ nmstate_ifs + [ {'name': item} | combine(removed) ] }}"
    loop: "{{ physical_nics | difference(primary_nic) }}"
    vars:
      primary_nic: "{{ [ network_info.public_ipv4.interface ] }}"
      removed:
        state: absent

  - name: Log target nmstate
    debug:
      var: nmstate_ifs

  - name: Set nmstate # noqa 301
    command: nmstatectl set --no-commit --timeout 60
    args:
      stdin: "{{ network_state | to_nice_json }}"
    vars:
      network_state:
        interfaces: "{{ nmstate_ifs }}"
    register: nmstateset

  # Doing this in 2 steps means that we'll automatically rollback if we break
  # networking such that ansible can no longer connect
  - name: Commit the new network state # noqa 301
    command: nmstatectl commit "{{ checkpoint }}"
    vars:
      checkpoint: "{{ (nmstateset.stdout_lines|last).split()[1] }}"

  # We have seen this creating a CentOS8 VM in OpenStack. We don't understand
  # why they are created. Specifically we see a phantom ens3 device. It's
  # possible they are baked into the image?
  #
  # nmstate doesn't report them, so we can't use nmstate to delete them.
  #
  # They cause installation failure due to the failure of the connection to
  # come up.
  - name: Get a list of phantom NM connections with no associated device # noqa 301
    shell: |
      set -o pipefail
      nmcli -g uuid,device connection | awk -F: '$2 == "" {print $1}'
    register: phantom_connections
    changed_when: false

  - name: Delete phantom NM connections # noqa 301
    command: nmcli connection delete uuid "{{ item }}"
    loop: "{{ phantom_connections.stdout_lines }}"

  # This prevents OpenStack installation failure later if the network unit
  # failed because not all physical interfaces have DHCP
  - name: Ensure network systemd unit is up
    systemd:
      name: network
      state: started

  - name: Create systemd unit to add SNAT rule for hostonly network
    template:
      src: "standalone_snat.service.j2"
      dest: "/etc/systemd/system/standalone_hostonly_snat.service"
      owner: root
      group: root
      mode: '0644'
    vars:
      cidr: "{{ hostonly_cidr }}"
      exit_ip: "{{ network_info.public_ipv4.address }}"

  - name: Activate systemd units
    systemd:
      name: "{{ item }}.service"
      enabled: true
      state: started
      daemon_reload: true
    loop:
    - standalone_hostonly_snat
