---
- hosts: standalone
  become: true
  become_user: root
  gather_facts: true
  vars_files: vars/defaults.yaml

  tasks:

  - name: Create the stack user
    user:
      name: stack
      groups: wheel

  - name: Prepare host on RHEL system
    when:
      - ansible_facts.distribution == 'RedHat'
    block:
      - name: install rhos-release
        yum:
          state: installed
          name:
          - http://download.devel.redhat.com/rcm-guest/puddles/OpenStack/rhos-release/rhos-release-latest.noarch.rpm
          disable_gpg_check: True

      - name: Fetch the Red Hat root certificate
        get_url:
          dest: /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt
          url: https://password.corp.redhat.com/RH-IT-Root-CA.crt

      - name: Add the certificate to the local trust bundle
        shell: |
          update-ca-trust enable
          update-ca-trust extract

      - name: Configure rhos release "{{ rhos_release }}" and keep puddle name
        shell: rhos-release "{{ rhos_release }}" | awk '/^# rhos-release/ { print $5 }'
        register: rhos_release_puddle

      - set_fact:
          puddle: "{{ rhos_release_puddle.stdout_lines.0 }}"

      - name: Download container_image_prepare.yaml for "{{ puddle }}"
        get_url:
          url: "http://download-node-02.eng.bos.redhat.com/rcm-guest/puddles/OpenStack/{{ rhos_release }}-RHEL-8/{{ puddle }}/container_image_prepare.yaml"
          dest: /home/stack/container_image_prepare.yaml
          owner: stack
          group: stack

  - name: Prepare host on CentOS system
    when:
      - ansible_facts.distribution == 'CentOS'
    block:
      - name: configure tripleo repositories
        import_role:
          name: tripleo.operator.tripleo_repos

  - name: Upgrade all packages # noqa 403
    yum:
      name: '*'
      state: latest
    register: yum

  - name: Reboot if we updated packages # noqa 503
    reboot:
    when: yum.changed

  - name: Set FQDN
    set_fact:
      fqdn: "{{ hostname }}.{{ clouddomain }}"

  - name: Set hostname to "{{ fqdn }}"
    hostname:
      name: "{{ fqdn }}"

  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'

  - name: Prepare host for Ceph
    when: ceph_enabled
    block:
    - name: Make sure we have losetup installed/latest
      package:
        name:
          - util-linux
          - lvm2
        state: present
    - name: Create a backing file for ceph
      command: /usr/bin/fallocate -l {{ ceph_loop_device_size }}G /var/lib/ceph-osd.img
      args:
        creates: /var/lib/ceph-osd.img
    - name: Create /etc/systemd/system/ceph-osd-losetup.service
      copy:
        dest: /etc/systemd/system/ceph-osd-losetup.service
        mode: 0755
        content: |
          [Unit]
          Description=Ceph OSD losetup
          After=syslog.target
          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c '/sbin/losetup /dev/loop1 || /sbin/losetup /dev/loop1 /var/lib/ceph-osd.img'
          ExecStop=/sbin/losetup -d /dev/loop1
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target
    - name: Enable ceph-osd-losetup.service
      systemd:
        name: ceph-osd-losetup.service
        enabled: true
        state: started
    - name: Create volume group for ceph
      lvg:
        vg: vg_ceph
        pvs: /dev/loop1
    - name: Create ceph data LV
      lvol:
        vg: vg_ceph
        lv: data
        size: 96%VG
    - name: Create ceph db LV
      lvol:
        vg: vg_ceph
        lv: db
        size: 4%VG
